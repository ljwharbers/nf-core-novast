/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
}

/////////////////////
// REFERENCE FILES //
/////////////////////

// PREPARE_REFERENCE_FILES
process {
    withName: '.*:PREPARE_REFERENCE_FILES:SAMTOOLS_FAIDX' {
        publishDir = [
            enabled: false
        ]
    }
}

// MINIMAP2_INDEX
if (!params.skip_save_minimap2_index) {
    process {
        withName:'.*:MINIMAP2_INDEX' {
            ext.args = {
                [
                    "-ax splice",
                    params.stranded == "forward" ? "-uf" : params.stranded == "reverse" ? "-ub" : "-un",
                    "-k${params.kmer_size}",
                    params.save_secondary_alignment == false ? "--secondary=no " : "--secondary=yes "
                ].join(' ').trim()
            }
            publishDir = [
                path: { "${params.outdir}/references/minimap_index" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

process {
    withName: '.*:UCSC_GTFTOGENEPRED' {
        publishDir = [
            enabled: false
        ]
    }
}

process {
    withName: '.*:UCSC_GENEPREDTOBED' {
        publishDir = [
            enabled: false
        ]
    }
}

/////////////
// FILE QC //
/////////////

// FASTQC
if (!params.skip_qc && !params.skip_fastqc) {
    process {
        withName: '.*:FASTQC_NANOPLOT_PRE_FLEXIPLEX:FASTQC' {
            ext.prefix = { "${meta.id}.raw" }
            ext.args = { '--quiet' }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/fastqc/pre_flexi" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }


        withName: '.*:FASTQC_NANOPLOT_POST_FLEXIPLEX:FASTQC' {
            ext.prefix = { "${meta.id}.trimmed" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/fastqc/post_flexi" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }
        
    }
}

// NANOPLOT
if (!params.skip_qc && !params.skip_nanoplot) {
    process {
        withName: '.*:FASTQC_NANOPLOT_PRE_FLEXIPLEX:NANOPLOT' {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/nanoplot/pre_flexi/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }
        
        withName: '.*:FASTQC_NANOPLOT_POST_FLEXIPLEX:NANOPLOT' {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/nanoplot/post_flexi/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }
    }
}

// NANOCOMP
if (!params.skip_qc && !params.skip_fastq_nanocomp) {
    process {
        withName: '.*:NANOCOMP_FASTQ' {
            publishDir = [
                path: { "${params.outdir}/batch_qcs/nanocomp/fastq" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
        }
    }
}

if (!params.skip_qc && !params.skip_bam_nanocomp) {
    process {
        withName: '.*:NANOCOMP_BAM' {
            publishDir = [
                path: { "${params.outdir}/batch_qcs/nanocomp/bam" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
        }
    }
}

// TOULLIGQC
if (!params.skip_qc && !params.skip_toulligqc) {
    process {
        withName: '.*:FASTQC_NANOPLOT_PRE_FLEXIPLEX:TOULLIGQC' {
            ext.prefix = { "${meta.id}.raw_" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/toulligqc/pre_flexi/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }

        withName: '.*:FASTQC_NANOPLOT_POST_FLEXIPLEX:TOULLIGQC' {
            ext.prefix = { "${meta.id}.postflexi_" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/toulligqc/post_flexi/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }
        
    }
}

// SEQKIT STATS
if (!params.skip_qc && !params.skip_seqkit_stats) {
    process {
        withName: '.*:SEQKIT_STATS_PRE' {
            ext.prefix = { "${meta.id}.raw" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/seqkit_stats/pre_flexi/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
    process {
        withName: '.*:SEQKIT_STATS_POST' {
            ext.prefix = { "${meta.id}.postflexi" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/seqkit_stats/post_flexi/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if (!params.skip_qc && !params.skip_rseqc) {

    process {
        withName:'.*:RSEQC_READDISTRIBUTION' {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/rseqc" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

// SAMTOOLS
if (!params.skip_qc){
    process {
        withName:'.*:BAM_SORT_STATS_SAMTOOLS_MINIMAP:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}.minimap" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/samtools/minimap" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
    if (!params.skip_dedup){
        process {
            withName:'.*:BAM_SORT_STATS_SAMTOOLS_DEDUP:BAM_STATS_SAMTOOLS:.*' {
                ext.prefix = { "${meta.id}.dedup.sorted" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/bam/dedup" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }
}
//////////////////////
// FASTQ PROCESSING //
//////////////////////

// SEQKIT_SPLIT
process {
    withName: SEQKIT_SPLIT2 {
    if (params.split_fastq_n != null){
        ext.args = [
            "--by-part ${params.split_fastq_n}",
            "--extension .gz"
        ].join(' ').trim()
        }
    publishDir = [
            enabled: false
        ]
    } 
}

// CAT_FASTQ
process {
    withName: '.*:CAT_FASTQ_SAMPLE' {
        publishDir = [
            enabled: false
        ]
    }
}

process {
    withName: '.*:CAT_FASTQ_SEQSPLIT' {
        publishDir = [
            enabled: false
        ]
    }
}


// PIGZ UNCOMPRESS
process {
    withName: '.*:RUN_FLEXIPLEX:PIGZ_UNCOMPRESS' {
        publishDir = [        
            path: { "${params.outdir}/${meta.id}/fastq/flexiplex" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        
        ]
    }
}

// FLEXIPLEX
process {
    withName: '.*:RUN_FLEXIPLEX:FLEXIPLEX' {
        publishDir = [
            enabled: false
        ]
    }
}

// PIGZ COMPRESS
process {
    withName: '.*:RUN_FLEXIPLEX:PIGZ_COMPRESS' {
        publishDir = [
            enabled: false
        ]
    }
}

///////////////
// ALIGNMENT //
///////////////

// MINIMAP
process {
    withName:'.*:MINIMAP2_ALIGN' {
        ext.args = {
            [
                "--MD -ax splice",
                params.stranded == "forward" ? "-uf" : params.stranded == "reverse" ? "-ub" : "-un",
                "-k${params.kmer_size}",
                params.save_secondary_alignment == false ? "--secondary=no " : "--secondary=yes "
            ].join(' ').trim()
        }
        publishDir = [
            enabled: false
        ]
    }
}

///////////////////////
// UMI DEDUPLICATION //
///////////////////////

if (!params.skip_dedup){
    process {
        withName: '.*:UMITOOLS_DEDUP' {
            ext.args = {
                [
                    '--per-cell'
                ].join(' ').trim()
            }
            ext.prefix = { "${meta.id}.dedup" }
            publishDir = [
                enabled: false
            ]
        }
    }
}

////////////////////
// BAM PROCESSING //
////////////////////

// FLEXIFORMATTER
process {
    withName:'.*:FLEXIFORMATTER' {
        publishDir = [
            enabled: false
        ]
    }
}

// SAMTOOLS_SORT
process {
    withName:'.*:BAM_SORT_STATS_SAMTOOLS_MINIMAP:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.sorted" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/bam/original" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

if (!params.skip_dedup){
    process {
        withName:'.*:BAM_SORT_STATS_SAMTOOLS_DEDUP:SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.dedup.sorted" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/bam/dedup" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

process {
    withName:'.*:BAM_SORT_STATS_SAMTOOLS_TAGGED:.*' {
        ext.prefix = { "${meta.id}.sorted" }
        publishDir = [
            enabled: false
        ]
    }
}

// SAMTOOLS_INDEX

process {
    withName:'.*:BAM_SORT_STATS_SAMTOOLS_MINIMAP:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/bam/original" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

process {
    withName:'.*:BAM_SORT_STATS_SAMTOOLS_DEDUP:SAMTOOLS_INDEX' {
        ext.prefix = { "${meta.id}.dedup.sorted" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/bam/dedup" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

//////////////
// ISOQUANT //
//////////////

process {
    withName: '.*:ISOQUANT' {
        ext.args = {
            [
                "--complete_genedb",
                params.stranded == "forward" ? "--stranded forward" : params.stranded == "reverse" ? "--stranded reverse" : "--stranded none",
                params.retain_introns ? "--gene_quantification all " : "--gene_quantification unique_inconsistent ",
                params.retain_introns ? "--transcript_quantification all " : "--transcript_quantification unique_only ",
                "--splice_correction_strategy default_ont ",
                "--model_construction_strategy sensitive_ont ",
                "--counts_format linear "
            ].join(' ').trim()
        }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/isoquant" },
            mode: params.publish_dir_mode,
            saveAs: {filename -> filename.equals('versions.yml') ? null: filename }
        ]
    }
}

/////////////
// MULTIQC //
/////////////

if (!params.skip_qc && !params.skip_multiqc) {
    process {
        withName: '.*:MULTIQC_FINALQC' {
            ext.args = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
            publishDir = [
                path: { "${params.outdir}/batch_qcs/multiqc/final_qc" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    process {
        withName: '.*:MULTIQC_RAWQC' {
            ext.args = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
            publishDir = [
                path: { "${params.outdir}/batch_qcs/multiqc/raw_qc" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}